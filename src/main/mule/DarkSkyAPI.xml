<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<flow name="DarkSkyAPICO" doc:id="8d0645a3-b505-4f38-8c1b-6f74861ead09" >
		<http:listener doc:name="Listener" doc:id="37290c05-0abd-402a-8369-6aff156865d3" config-ref="DEFAULT_HTTP_Listener_Endpoint" path="/DarkSkyCO" allowedMethods="GET"/>
		<logger level="INFO" doc:name="Start Get Current CO Weather" doc:id="c768fb06-3d5a-4090-a9a9-50423051cfef" message="DarkSkyAPI Starting: GET Current CO Weather..."/>
		<set-variable value="#[{
	daySize: message.attributes.headers.DaySize,
	hourSize: message.attributes.headers.HourSize,
	minSize: message.attributes.headers.MinuteSize
}]" doc:name="Set headers to Vars" doc:id="c05711f0-90a5-4e72-81fc-e3d6c2d88fb1" variableName="headerVars"/>
		<http:request method="GET" doc:name="Request" doc:id="49d7ed69-c9fe-464a-b25a-d464ce5fb7f2" config-ref="DARKSKYAPI_Request_configuration" path="${longLat.DenverCo}"/>
		<ee:transform doc:name="SplitPayloadToVars" doc:id="047699a4-b97b-496a-bb35-25d10b7cc21d" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="CurrentlyData" ><![CDATA[%dw 2.0
output application/json
---
{
	    "time": payload.currently.time as DateTime,
        "summary": payload.currently.summary,
        "icon": payload.currently.icon,
        "nearestStormDistance": payload.currently.nearestStormDistance,
        "nearestStormBearing": payload.currently.nearestStormBearing,
        "precipIntensity": payload.currently.precipIntensity,
        "precipProbability": payload.currently.precipProbability,
        "temperature": payload.currently.temperature,
        "apparentTemperature": payload.currently.apparentTemperature,
        "dewPoint": payload.currently.dewPoint,
        "humidity": payload.currently.humidity,
        "pressure": payload.currently.pressure,
        "windSpeed": payload.currently.windSpeed,
        "windGust": payload.currently.windGust,
        "windBearing": payload.currently.windBearing,
        "cloudCover": payload.currently.cloudCover,
        "uvIndex": payload.currently.uvIndex,
        "visibility": payload.currently.visibility,
        "ozone": payload.currently.ozone
}]]></ee:set-variable>
				<ee:set-variable variableName="MinutelyData" ><![CDATA[%dw 2.0
output application/json
---
payload.minutely.data filter (($$ < vars.headerVars.minSize)) map {
	MinuteMark: $$,
	time: $.time as DateTime,
	precipIntensity: $.precipIntensity,
	precitProbibility: $.precipProbability
}]]></ee:set-variable>
				<ee:set-variable variableName="HourlyData" ><![CDATA[%dw 2.0
output application/json
---
payload.hourly.data filter (($$ < vars.headerVars.hourSize)) map {
	HourMark: $$,
	time: $.time as DateTime,
    "summary": $.summary,
    "icon": $.icon,
    "precipIntensity": $.precipIntensity,
    "precipProbability": $.precipProbability,
    "precipType": $.precipType,
    "temperature": $.temperature,
    "apparentTemperature": $.apparentTemperature,
    "dewPoint": $.dewPoint,
    "humidity": $.humidity,
    "pressure": $.pressure,
    "windSpeed": $.windSpeed,
    "windGust": $.windGust,
    "windBearing": $.windBearing,
    "cloudCover": $.cloudCover,
    "uvIndex": $.uvIndex,
    "visibility": $.visibility,
    "ozone": $.ozone
}]]></ee:set-variable>
				<ee:set-variable variableName="DailyData" ><![CDATA[%dw 2.0
output application/json
---
payload.daily.data filter (($$ < vars.headerVars.daySize)) map {
	DayMark: $$,
             "time": $.time as DateTime,
             "summary": $.summary,
             "icon": $.icon,
             "sunriseTime": $.sunriseTime as DateTime,
             "sunsetTime": $.sunsetTime as DateTime,
             "moonPhase": $.moonPhase,
             "precipIntensity": $.precipIntensity,
             "precipIntensityMax": $.precipIntensityMax,
             "precipIntensityMaxTime": $.precipIntensityMaxTime as DateTime,
             "precipProbability": $.precipProbability,
             "precipType": $.precipType,
             "precipAccumulation": $.precipAccumulation,
             "temperatureHigh": $.temperatureHigh,
             "temperatureHighTime": $.temperatureHighTime as DateTime,
             "temperatureLow": $.temperatureLow,
             "temperatureLowTime": $.temperatureLowTime as DateTime,
             "apparentTemperatureHigh": $.apparentTemperatureHigh,
             "apparentTemperatureHighTime": $.apparentTemperatureHighTime as DateTime,
             "apparentTemperatureLow": $.apparentTemperatureLow,
             "apparentTemperatureLowTime": $.apparentTemperatureLowTime as DateTime,
             "dewPoint": $.dewPoint,
             "humidity": $.humidity,
             "pressure": $.pressure,
             "windSpeed": $.windSpeed,
             "windGust": $.windGust,
             "windGustTime": $.windGustTime as DateTime,
             "windBearing": $.windBearing,
             "cloudCover": $.cloudCover,
             "uvIndex": $.uvIndex,
             "uvIndexTime": $.uvIndexTime as DateTime,
             "visibility": $.visibility,
             "Ozone": $.ozone,
             "temperatureMin": $.temperatureMin,
             "temperatureMinTime": $.temperatureMinTime as DateTime,
             "temperatureMax": $.temperatureMax,
             "temperatureMaxTime": $.temperatureMaxTime as DateTime,
             "apparentTemperatureMin": $.apparentTemperatureMin,
             "apparentTemperatureMinTime": $.apparentTemperatureMinTime as DateTime,
             "apparentTemperatureMax": $.apparentTemperatureMax,
             "apparentTemperatureMaxTime": $.apparentTemperatureMaxTime as DateTime
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<ee:transform doc:name="GiveBackFirstOfEachArray" doc:id="d34cc7e3-f77b-4357-9b62-464ff9acfb2b" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	CurrentSystemTime: now() as DateTime,
	CurrentTimeFromAPI: vars.CurrentlyData.time,
	TimeZone: payload.timezone,
	OffSet: payload.offset,
	Currently:{
		Summary: vars.CurrentlyData.summary,
		CurrentTemp: vars.CurrentlyData.temperature,
		Humidity: vars.CurrentlyData.humidity,
		WindSpeed: vars.CurrentlyData.windSpeed,
		WindDirection: vars.CurrentlyData.windBearing,
		PrecipProb: vars.CurrentlyData.precipProbability
		
	},
	Minutely: vars.MinutelyData map {
		Min:$$ + 1,
		Time: $.time,
		PercipProb: $.precitProbibility,
		PercipInten: $.precipIntensity
	},
	Hourly: vars.HourlyData map{
		Hour: $$+1,
		Time: $.time,
		Summary: $.summary,
		Temp: $.temperature,
		Humidity: $.humidity,
		WindSpeed: $.windSpeed,
		WindDirection: $.windBearing,
		PrecipProb: $.precipProbability		
	},
	Daily: vars.DailyData map {
		Instance: $$+1,
		DayOfWeek: $.time.dayOfWeek,
		Time: $.time,
		Summary: $.summary,
		Sunrise: $.sunriseTime,
		SunSet: $.sunsetTime,
		MoonPhase: $.moonPhase,
		TempLow: $.temperatureLow,
		TempLowTime: $.temperatureLowTime,
		TempHigh: $.temperatureHigh,
		TempHighTime: $.temperatureHighTime,
		Humidity: $.humidity,
		WindSpeed: $.windSpeed,
		WindDirection: $.windBearing,
		PrecipProb: $.precipProbability
	},
	TimeData: {
		Day: now().day,
		DayOfWeek: now().dayOfWeek,
		DayOfYear: now().dayOfYear,
		now: now(),
  		epochTime : now() as Number,
  		nanoseconds: now().nanoseconds,
  		milliseconds: now().milliseconds,
  		seconds: now().seconds,
  		minutes: now().minutes,
  		hour: now().hour,
  		day: now().day,
  		month: now().month,
  		year: now().year,
  		quarter: now().quarter,
  		dayOfWeek: now().dayOfWeek,
  		dayOfYear: now().dayOfYear,
  		offsetSeconds: now().offsetSeconds,
  		formattedDate: now() as String {format: "y-MM-dd"},
  		formattedTime: now() as String {format: "hh:m:s"}
	},
}]]></ee:set-payload>
			</ee:message>
			<ee:variables >
			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="End Get Current CO Weather" doc:id="a4466d87-018b-4cea-9962-cf36696f2109" message="DarkSkyAPI End: GET Current CO Weather..."/>
	</flow>
	<flow name="DarkSkyAPINC" doc:id="71bf6966-7b62-4db5-a0ee-3a65b7709e93" >
		<http:listener doc:name="Listener" doc:id="ec657a3b-6ccb-4c14-bb10-4572c93df0a4" config-ref="DEFAULT_HTTP_Listener_Endpoint" path="/DarkSkyNC" allowedMethods="GET"/>
		<logger level="INFO" doc:name="Start Get Current NC Weather" doc:id="75ff37fc-f9e1-4139-8991-a0db4512cca7" message="DarkSkyAPI Starting: GET Current NC Weather..."/>
		<set-variable value="#[{
	daySize: message.attributes.headers.DaySize,
	hourSize: message.attributes.headers.HourSize,
	minSize: message.attributes.headers.MinuteSize
}]" doc:name="Set headers to Vars" doc:id="01c3436d-24a8-4fbd-91d1-de1f6eaa241f" variableName="headerVars" />
		<ee:transform doc:name="SetPayloadForNC" doc:id="9f098d11-9277-4726-9126-3cea7bee3a89" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<http:request method="GET" doc:name="Request" doc:id="60deb15c-4b0b-431c-bdc7-07416064fcfb" path="${longLat.DurhamNC}" config-ref="DARKSKYAPI_Request_configuration"/>
		<ee:transform doc:name="SplitPayloadToVars" doc:id="9ec9c63c-9864-49d1-8c2f-0bc9fa7e2ff7">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="CurrentlyData"><![CDATA[%dw 2.0
output application/json
---
{
	    "time": payload.currently.time as DateTime,
        "summary": payload.currently.summary,
        "icon": payload.currently.icon,
        "nearestStormDistance": payload.currently.nearestStormDistance,
        "nearestStormBearing": payload.currently.nearestStormBearing,
        "precipIntensity": payload.currently.precipIntensity,
        "precipProbability": payload.currently.precipProbability,
        "temperature": payload.currently.temperature,
        "apparentTemperature": payload.currently.apparentTemperature,
        "dewPoint": payload.currently.dewPoint,
        "humidity": payload.currently.humidity,
        "pressure": payload.currently.pressure,
        "windSpeed": payload.currently.windSpeed,
        "windGust": payload.currently.windGust,
        "windBearing": payload.currently.windBearing,
        "cloudCover": payload.currently.cloudCover,
        "uvIndex": payload.currently.uvIndex,
        "visibility": payload.currently.visibility,
        "ozone": payload.currently.ozone
}]]></ee:set-variable>
				<ee:set-variable variableName="MinutelyData"><![CDATA[%dw 2.0
output application/json
---
payload.minutely.data filter (($$ < vars.headerVars.minSize)) map {
	MinuteMark: $$,
	time: $.time as DateTime,
	precipIntensity: $.precipIntensity,
	precitProbibility: $.precipProbability
}]]></ee:set-variable>
				<ee:set-variable variableName="HourlyData"><![CDATA[%dw 2.0
output application/json
---
payload.hourly.data filter (($$ < vars.headerVars.hourSize)) map {
	HourMark: $$,
	time: $.time as DateTime,
    "summary": $.summary,
    "icon": $.icon,
    "precipIntensity": $.precipIntensity,
    "precipProbability": $.precipProbability,
    "precipType": $.precipType,
    "temperature": $.temperature,
    "apparentTemperature": $.apparentTemperature,
    "dewPoint": $.dewPoint,
    "humidity": $.humidity,
    "pressure": $.pressure,
    "windSpeed": $.windSpeed,
    "windGust": $.windGust,
    "windBearing": $.windBearing,
    "cloudCover": $.cloudCover,
    "uvIndex": $.uvIndex,
    "visibility": $.visibility,
    "ozone": $.ozone
}]]></ee:set-variable>
				<ee:set-variable variableName="DailyData"><![CDATA[%dw 2.0
output application/json
---
payload.daily.data filter (($$ < vars.headerVars.daySize)) map {
	DayMark: $$,
             "time": $.time as DateTime,
             "summary": $.summary,
             "icon": $.icon,
             "sunriseTime": $.sunriseTime as DateTime,
             "sunsetTime": $.sunsetTime as DateTime,
             "moonPhase": $.moonPhase,
             "precipIntensity": $.precipIntensity,
             "precipIntensityMax": $.precipIntensityMax,
             "precipIntensityMaxTime": $.precipIntensityMaxTime as DateTime,
             "precipProbability": $.precipProbability,
             "precipType": $.precipType,
             "precipAccumulation": $.precipAccumulation,
             "temperatureHigh": $.temperatureHigh,
             "temperatureHighTime": $.temperatureHighTime as DateTime,
             "temperatureLow": $.temperatureLow,
             "temperatureLowTime": $.temperatureLowTime as DateTime,
             "apparentTemperatureHigh": $.apparentTemperatureHigh,
             "apparentTemperatureHighTime": $.apparentTemperatureHighTime as DateTime,
             "apparentTemperatureLow": $.apparentTemperatureLow,
             "apparentTemperatureLowTime": $.apparentTemperatureLowTime as DateTime,
             "dewPoint": $.dewPoint,
             "humidity": $.humidity,
             "pressure": $.pressure,
             "windSpeed": $.windSpeed,
             "windGust": $.windGust,
             "windGustTime": $.windGustTime as DateTime,
             "windBearing": $.windBearing,
             "cloudCover": $.cloudCover,
             "uvIndex": $.uvIndex,
             "uvIndexTime": $.uvIndexTime as DateTime,
             "visibility": $.visibility,
             "Ozone": $.ozone,
             "temperatureMin": $.temperatureMin,
             "temperatureMinTime": $.temperatureMinTime as DateTime,
             "temperatureMax": $.temperatureMax,
             "temperatureMaxTime": $.temperatureMaxTime as DateTime,
             "apparentTemperatureMin": $.apparentTemperatureMin,
             "apparentTemperatureMinTime": $.apparentTemperatureMinTime as DateTime,
             "apparentTemperatureMax": $.apparentTemperatureMax,
             "apparentTemperatureMaxTime": $.apparentTemperatureMaxTime as DateTime
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<ee:transform doc:name="GiveBackFirstOfEachArray" doc:id="ccb1d59e-60e2-4a2f-8505-d1187cc1af0f">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	CurrentSystemTime: now() as DateTime,
	CurrentTimeFromAPI: vars.CurrentlyData.time,
	TimeZone: payload.timezone,
	OffSet: payload.offset,
	Currently:{
		Summary: vars.CurrentlyData.summary,
		CurrentTemp: vars.CurrentlyData.temperature,
		Humidity: vars.CurrentlyData.humidity,
		WindSpeed: vars.CurrentlyData.windSpeed,
		WindDirection: vars.CurrentlyData.windBearing,
		PrecipProb: vars.CurrentlyData.precipProbability
		
	},
	Minutely: vars.MinutelyData map {
		Min:$$ + 1,
		Time: $.time,
		PercipProb: $.precitProbibility,
		PercipInten: $.precipIntensity
	},
	Hourly: vars.HourlyData map{
		Hour: $$+1,
		Time: $.time,
		Summary: $.summary,
		Temp: $.temperature,
		Humidity: $.humidity,
		WindSpeed: $.windSpeed,
		WindDirection: $.windBearing,
		PrecipProb: $.precipProbability		
	},
	Daily: vars.DailyData map {
		Instance: $$+1,
		DayOfWeek: $.time.dayOfWeek,
		Time: $.time,
		Summary: $.summary,
		Sunrise: $.sunriseTime,
		SunSet: $.sunsetTime,
		MoonPhase: $.moonPhase,
		TempLow: $.temperatureLow,
		TempLowTime: $.temperatureLowTime,
		TempHigh: $.temperatureHigh,
		TempHighTime: $.temperatureHighTime,
		Humidity: $.humidity,
		WindSpeed: $.windSpeed,
		WindDirection: $.windBearing,
		PrecipProb: $.precipProbability
	},
	TimeData: {
		Day: now().day,
		DayOfWeek: now().dayOfWeek,
		DayOfYear: now().dayOfYear,
		now: now(),
  		epochTime : now() as Number,
  		nanoseconds: now().nanoseconds,
  		milliseconds: now().milliseconds,
  		seconds: now().seconds,
  		minutes: now().minutes,
  		hour: now().hour,
  		day: now().day,
  		month: now().month,
  		year: now().year,
  		quarter: now().quarter,
  		dayOfWeek: now().dayOfWeek,
  		dayOfYear: now().dayOfYear,
  		offsetSeconds: now().offsetSeconds,
  		formattedDate: now() as String {format: "y-MM-dd"},
  		formattedTime: now() as String {format: "hh:m:s"}
	},
}]]></ee:set-payload>
			</ee:message>
			<ee:variables>
			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="End Get Current NC Weather" doc:id="ab2fa97c-4bf5-46d9-a39a-9fee4bfe4be5" message="DarkSkyAPI End: GET Current NC Weather..."/>
	</flow>
	<flow name="DarkSkyAPILA" doc:id="09649ba7-ea2d-4cca-b4c5-577d7ea45472" >
		<http:listener doc:name="Listener" doc:id="4faecf36-8804-48ba-9100-864a4b09e07a" config-ref="DEFAULT_HTTP_Listener_Endpoint" path="/DarkSkyLA" allowedMethods="GET" />
		<logger level="INFO" doc:name="Start Get Current LA Weather" doc:id="d265d06b-8e62-4fb7-bbb1-e5146d77f35e" message="DarkSkyAPI Starting: GET Current LA Weather..." />
		<set-variable value="#[{
	daySize: message.attributes.headers.DaySize,
	hourSize: message.attributes.headers.HourSize,
	minSize: message.attributes.headers.MinuteSize
}]" doc:name="Set headers to Vars" doc:id="4141ada6-0fcc-4cd9-994e-4c6dfce12db7" variableName="headerVars" />
		<http:request method="GET" doc:name="Request" doc:id="de29acbd-4c5d-49c0-9bc1-d05e4c7b8410" path="${longLat.LACA}" config-ref="DARKSKYAPI_Request_configuration"/>
		<ee:transform doc:name="SplitPayloadToVars" doc:id="6af04e32-deec-419e-bdfc-2ff25eb808bc">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="CurrentlyData"><![CDATA[%dw 2.0
output application/json
---
{
	    "time": payload.currently.time as DateTime,
        "summary": payload.currently.summary,
        "icon": payload.currently.icon,
        "nearestStormDistance": payload.currently.nearestStormDistance,
        "nearestStormBearing": payload.currently.nearestStormBearing,
        "precipIntensity": payload.currently.precipIntensity,
        "precipProbability": payload.currently.precipProbability,
        "temperature": payload.currently.temperature,
        "apparentTemperature": payload.currently.apparentTemperature,
        "dewPoint": payload.currently.dewPoint,
        "humidity": payload.currently.humidity,
        "pressure": payload.currently.pressure,
        "windSpeed": payload.currently.windSpeed,
        "windGust": payload.currently.windGust,
        "windBearing": payload.currently.windBearing,
        "cloudCover": payload.currently.cloudCover,
        "uvIndex": payload.currently.uvIndex,
        "visibility": payload.currently.visibility,
        "ozone": payload.currently.ozone
}]]></ee:set-variable>
				<ee:set-variable variableName="MinutelyData"><![CDATA[%dw 2.0
output application/json
---
payload.minutely.data filter (($$ < vars.headerVars.minSize)) map {
	MinuteMark: $$,
	time: $.time as DateTime,
	precipIntensity: $.precipIntensity,
	precitProbibility: $.precipProbability
}]]></ee:set-variable>
				<ee:set-variable variableName="HourlyData"><![CDATA[%dw 2.0
output application/json
---
payload.hourly.data filter (($$ < vars.headerVars.hourSize)) map {
	HourMark: $$,
	time: $.time as DateTime,
    "summary": $.summary,
    "icon": $.icon,
    "precipIntensity": $.precipIntensity,
    "precipProbability": $.precipProbability,
    "precipType": $.precipType,
    "temperature": $.temperature,
    "apparentTemperature": $.apparentTemperature,
    "dewPoint": $.dewPoint,
    "humidity": $.humidity,
    "pressure": $.pressure,
    "windSpeed": $.windSpeed,
    "windGust": $.windGust,
    "windBearing": $.windBearing,
    "cloudCover": $.cloudCover,
    "uvIndex": $.uvIndex,
    "visibility": $.visibility,
    "ozone": $.ozone
}]]></ee:set-variable>
				<ee:set-variable variableName="DailyData"><![CDATA[%dw 2.0
output application/json
---
payload.daily.data filter (($$ < vars.headerVars.daySize)) map {
	DayMark: $$,
             "time": $.time as DateTime,
             "summary": $.summary,
             "icon": $.icon,
             "sunriseTime": $.sunriseTime as DateTime,
             "sunsetTime": $.sunsetTime as DateTime,
             "moonPhase": $.moonPhase,
             "precipIntensity": $.precipIntensity,
             "precipIntensityMax": $.precipIntensityMax,
             "precipIntensityMaxTime": $.precipIntensityMaxTime as DateTime,
             "precipProbability": $.precipProbability,
             "precipType": $.precipType,
             "precipAccumulation": $.precipAccumulation,
             "temperatureHigh": $.temperatureHigh,
             "temperatureHighTime": $.temperatureHighTime as DateTime,
             "temperatureLow": $.temperatureLow,
             "temperatureLowTime": $.temperatureLowTime as DateTime,
             "apparentTemperatureHigh": $.apparentTemperatureHigh,
             "apparentTemperatureHighTime": $.apparentTemperatureHighTime as DateTime,
             "apparentTemperatureLow": $.apparentTemperatureLow,
             "apparentTemperatureLowTime": $.apparentTemperatureLowTime as DateTime,
             "dewPoint": $.dewPoint,
             "humidity": $.humidity,
             "pressure": $.pressure,
             "windSpeed": $.windSpeed,
             "windGust": $.windGust,
             "windGustTime": $.windGustTime as DateTime,
             "windBearing": $.windBearing,
             "cloudCover": $.cloudCover,
             "uvIndex": $.uvIndex,
             "uvIndexTime": $.uvIndexTime as DateTime,
             "visibility": $.visibility,
             "Ozone": $.ozone,
             "temperatureMin": $.temperatureMin,
             "temperatureMinTime": $.temperatureMinTime as DateTime,
             "temperatureMax": $.temperatureMax,
             "temperatureMaxTime": $.temperatureMaxTime as DateTime,
             "apparentTemperatureMin": $.apparentTemperatureMin,
             "apparentTemperatureMinTime": $.apparentTemperatureMinTime as DateTime,
             "apparentTemperatureMax": $.apparentTemperatureMax,
             "apparentTemperatureMaxTime": $.apparentTemperatureMaxTime as DateTime
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<ee:transform doc:name="GiveBackFirstOfEachArray" doc:id="f0c0e6cd-89cf-4d34-a489-9b68f4bade2e">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	CurrentSystemTime: now() as DateTime,
	CurrentTimeFromAPI: vars.CurrentlyData.time,
	TimeZone: payload.timezone,
	OffSet: payload.offset,
	Currently:{
		Summary: vars.CurrentlyData.summary,
		CurrentTemp: vars.CurrentlyData.temperature,
		Humidity: vars.CurrentlyData.humidity,
		WindSpeed: vars.CurrentlyData.windSpeed,
		WindDirection: vars.CurrentlyData.windBearing,
		PrecipProb: vars.CurrentlyData.precipProbability
		
	},
	Minutely: vars.MinutelyData map {
		Min:$$ + 1,
		Time: $.time,
		PercipProb: $.precitProbibility,
		PercipInten: $.precipIntensity
	},
	Hourly: vars.HourlyData map{
		Hour: $$+1,
		Time: $.time,
		Summary: $.summary,
		Temp: $.temperature,
		Humidity: $.humidity,
		WindSpeed: $.windSpeed,
		WindDirection: $.windBearing,
		PrecipProb: $.precipProbability		
	},
	Daily: vars.DailyData map {
		Instance: $$+1,
		DayOfWeek: $.time.dayOfWeek,
		Time: $.time,
		Summary: $.summary,
		Sunrise: $.sunriseTime,
		SunSet: $.sunsetTime,
		MoonPhase: $.moonPhase,
		TempLow: $.temperatureLow,
		TempLowTime: $.temperatureLowTime,
		TempHigh: $.temperatureHigh,
		TempHighTime: $.temperatureHighTime,
		Humidity: $.humidity,
		WindSpeed: $.windSpeed,
		WindDirection: $.windBearing,
		PrecipProb: $.precipProbability
	},
	TimeData: {
		Day: now().day,
		DayOfWeek: now().dayOfWeek,
		DayOfYear: now().dayOfYear,
		now: now(),
  		epochTime : now() as Number,
  		nanoseconds: now().nanoseconds,
  		milliseconds: now().milliseconds,
  		seconds: now().seconds,
  		minutes: now().minutes,
  		hour: now().hour,
  		day: now().day,
  		month: now().month,
  		year: now().year,
  		quarter: now().quarter,
  		dayOfWeek: now().dayOfWeek,
  		dayOfYear: now().dayOfYear,
  		offsetSeconds: now().offsetSeconds,
  		formattedDate: now() as String {format: "y-MM-dd"},
  		formattedTime: now() as String {format: "hh:m:s"}
	},
}]]></ee:set-payload>
			</ee:message>
			<ee:variables>
			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="Get Current CO Weather" doc:id="f4cacb35-f6d6-4b79-9e70-8d3458101444" message="DarkSkyAPI End: GET Current LA Weather..."/>
	</flow>
</mule>
